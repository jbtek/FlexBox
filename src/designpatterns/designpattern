Q 1. What is design Pattern?
Answer: 'A design pattern is a term used in software engineering for a general,
reusable solution to a commonly occurring problem in software design.
Patterns also make your code more reusable and readable while speeding up the development process vastly.'
Design patterns are by no means finished solutions.
They only provide us with approaches or schemes to solve a problem.

There were 23 design patterns introduced in the original book.

Categories of Design Patterns

Design patterns are usually categorized into three major groups.

1.Creational Design Patterns
As the name suggests, these patterns are for handling object creational mechanisms. A creational design pattern basically solves a problem by controlling the creation process of an object.
We will discuss the following patterns in detail:
Constructor Pattern,
Factory Pattern,
Prototype Pattern,
and Singleton Pattern.

2.Structural Design Patterns
These patterns are concerned with class and object composition. They help structure or restructure one or more parts without affecting the entire system. In other words, they help obtain new functionalities without tampering with the existing ones.
We will discuss the following patterns in detail:
Adapter Pattern,
Composite Pattern,
Decorator Pattern,
Fa√ßade Pattern,
Flyweight Pattern,
and Proxy Pattern.

3.Behavioral Design Patterns
These patterns are concerned with improving communication between dissimilar objects.
We will discuss the following patterns in detail:
Chain of Responsibility Pattern,
Command Pattern,
Iterator Pattern,
Mediator Pattern,
Observer Pattern, 
State Pattern,
Strategy Pattern,
and Template Pattern.
